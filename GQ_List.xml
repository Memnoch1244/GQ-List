<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, January 10, 2024, 4:25 PM -->
<!-- MuClient version 5.07-pre -->

<muclient>
<plugin
   name="GQ_List"
   author="Ramael"
   id="c4d0dab117586c793985623f"
   language="Lua"
   purpose="Shows GQ List in a miniwindow."
   save_state="y"
   date_written="2024-01-10 4:24:13"
   requires="5.07"
   version="3.0"
   >

</plugin>


<!--  Script  -->

<script>
<![CDATA[

require "themed_miniwindows"
require "gmcphelper" -- adds the gmcp() function for simplifying data access
require "tprint"
dofile(GetInfo(60).."aardwolf_colors.lua")

win = "gqwin_" .. GetPluginID()
qgsound = "global_quest.wav"
gqhistory = {}
sound_on = true
local plugin_id_z_order = "462b665ecb569efbf261422f"


function gq_list_end(name, line, wildcards, styles)
  -- clears window on gq list update
  my_window:blank()
  hotspots = WindowHotspotList(win)
  if hotspots then
    for k, v in pairs(hotspots) do 
      if string.sub(v, 1, 8) == "hotspot_" or v == "titlemenu" then
        WindowDeleteHotspot (win, v)
      end
    end
  end -- if any 

  -- set menu hotspot
  WindowAddHotspot(win, "titlemenu", 0, 0, tonumber(WindowInfo(win,3)), 20, "", "", "mousedown_drag", "", "menu_mouseup", "Drag to move window\nRight-click for menu", 0, 0)

  -- rebuilds the GQ list each tick
  WindowFont(win, "f1", "Dina", 8, false, false, false, false, 0)
  WindowText(win, "f1", "Num   Type            From  To  Status     Timer Players", 5, 20, 0, 0, ColourNameToRGB("white"), false)
  WindowText(win, "f1", "----- --------------- ---- ---- ---------- ----- -------", 5, 30, 0, 0, ColourNameToRGB("white"), false)

  if #GQ_table > 0 then
    for i = 1, #GQ_table do
      if tonumber(string.sub(GQ_table[i], 29, 31)) >= tonumber(level) and tonumber(string.sub(GQ_table[i], 24, 26)) <= tonumber(level) then
        WindowText(win, "f1", GQ_table[i], 5, i * 12 + 30, 0, 0, ColourNameToRGB("lime"), false)
        WindowAddHotspot(win, "hotspot_" .. string.sub(GQ_table[i],1,5), 5, i * 12 + 32, 400, i * 12 + 42, "", "", "", "", "mouseup", "Left-click to see GQ info\nRight-click to join", 1, 0)
        gqsoundcheck(string.sub(GQ_table[i],1,5))
      elseif tonumber(string.sub(GQ_table[i], 24, 26)) == tonumber(level) + 1 then
        WindowText(win, "f1", GQ_table[i], 5, i * 12 + 30, 0, 0, ColourNameToRGB("yellow"), false)
        WindowAddHotspot(win, "hotspot_" .. string.sub(GQ_table[i],1,5), 5, i * 12 + 32, 400, i * 12 + 42, "", "", "", "", "mouseup", "Left-click to see GQ info\nRight-click to join", 1, 0)
        gqsoundcheck(string.sub(GQ_table[i],1,5))
      else
        WindowText(win, "f1", GQ_table[i], 5, i * 12 + 30, 0, 0, ColourNameToRGB("red"), false)
        WindowAddHotspot(win, "hotspot_" .. string.sub(GQ_table[i],1,5), 5, i * 12 + 32, 400, i * 12 + 42, "", "", "", "", "mouseup", "Left-click to see GQ info\nRight-click to join", 1, 0)
      end  -- if
    end  -- for

  else
    WindowText(win, "f1", "No active Global Quests.", 5, 42, 0, 0, ColourNameToRGB("white"), false)
  end  -- if
  
  WindowDragHandler(win, "titlemenu", "dragmove", "dragrelease", 0)
  my_window:dress_window()

end  -- function

function gqsoundcheck(gqid)
  Note("gqsoundcheck" .. gqid)
  match_found = false
  if #gqhistory > 0 then

    for j = 1, #gqhistory do
      if gqhistory[j] == gqid then
        match_found = true
      end  -- if
    end  -- for

    if match_found == false then
      gqhistory[#gqhistory + 1] = gqid
      if sound_on then
        PlaySound(0, GetInfo(74) .. qgsound, false, 100, 0)
      end  -- if
    end  -- if

  else
    gqhistory[#gqhistory + 1] = gqid
    if sound_on then
      PlaySound(0, GetInfo(74) .. qgsound, false, 100, 0)
    end  -- if
  end  -- if

  while #gqhistory > 5 do
    table.remove(gqhistory, 1)
  end  -- while
  tprint(gqhistory)

end  -- function

function togglesound()
  if sound_on == false then
    sound_on = true
    Note("GQ Info Sound On")
  else 
    sound_on = false
    Note("GQ Info Sound Off")
  end  -- if
  SaveState()
end  -- function

function bring_to_front()
  CallPlugin(plugin_id_z_order, "boostMe", win)
  Note("GQ Info Window Moved to Front")
  SaveState()
end

function send_to_back()
  CallPlugin(plugin_id_z_order, "dropMe", win)
  Note("GQ Info Window Moved to Back")
  SaveState()
end


my_window = ThemedBasicWindow(
   win,                              -- string, required, a unique identifier for this window
   0,                                -- integer, required, where to put it if the player hasn't moved it
   0,                                -- integer, required, where to put it if the player hasn't moved it
   400,                              -- integer, required, how big to make it if the player hasn't moved it
   100,                              -- integer, required, how big to make it if the player hasn't moved it
   "Active Global Quests",           -- string, optional (nil means no titlebar), text to put into the title
   "center",                         -- string, optional (default is "center"), "left", "center", or "right"
   false,                            -- boolean, optional (default is false), true adds a close button in the top left
   1,                                -- nil/integer, optional (default is nil), nil for non-resizeable, 1 for demi, 2 for full
   gq_list_end,                      -- function, optional (default is nil), display function to call while resizing
   gq_list_end,                      -- function, optional (default is nil), display function to call after resizing is done
   nil,                              -- function, optional (default is nil), cleanup function to call when closed/deleted
   nil,                              -- string, optional (default is Dina), override the default font name
   8,                                -- integer, optional (default is 10), override the default font size
   false,                            -- boolean, optional (default is false), true will prevent the window from appearing until you call :show() on it
   false                             -- boolean, optional (default is false), if true, pixels the same color as Theme.PRIMARY_BODY will be transparent
)

if (IsPluginInstalled(plugin_id_z_order) and GetPluginInfo(plugin_id_z_order, 17)) then
  CallPlugin(plugin_id_z_order, "registerMiniwindow", win)
end

function mousedown_drag(flags, hotspot_id)
    win_dragmove_start_x = WindowInfo(win, 14)
    win_dragmove_start_y = WindowInfo(win, 15)
end

function dragmove(flags, hotspot_id)
    if (bit.band(flags, 0x20) == 0) then
        win_pos_x = WindowInfo(win, 17) -- - 50
        win_pos_y = WindowInfo(win, 18) -- - 7
        local delta_x = win_pos_x - win_dragmove_start_x
        local delta_y = win_pos_y - win_dragmove_start_y
        local max_x = GetInfo(281) - 100
        local max_y = GetInfo(280) - 60
        if (delta_x <= 1) then -- Prevents window from leaving the screen.
            delta_x = 1
        elseif (delta_x >= max_x) then
            delta_x = max_x
        end
        if (delta_y <= 1) then
            delta_y = 1
        elseif (delta_y >= max_y) then
            delta_y = max_y
        end
        WindowPosition(win, delta_x, delta_y, miniwin.pos_stretch_to_view, miniwin.create_absolute_location) -- move window to new location
    else
        return
    end
end

function dragrelease(flags, hotspot_id)
    --  do nothing
end

function menu_mouseup(flags, hotspotid)
  if tonumber(flags) == 32 then
    result = WindowMenu(win, WindowInfo(win,14),WindowInfo(win,15), "!Toggle Sound|Bring to Front|Send to Back")
    if result ~= "" then
      local numresult = tonumber(result)
      if numresult == 1 then
        togglesound()
      elseif numresult == 2 then
        bring_to_front()
      elseif numresult == 3 then
        send_to_back()
      end  -- check which menu item
    end  -- check not blank
  end  -- check click type
end  -- function
 
function mouseup(flags, hotspotid)
  if tonumber(flags) == 16 then
    SendNoEcho("gq info " .. string.sub(hotspotid, 9,13))
  elseif tonumber(flags) == 32 then
    SendNoEcho("gq join " .. string.sub(hotspotid, 9,13))
  end
end

function OnPluginBroadcast(msg, id, name, text)
  -- check for broadcast from GMCP helper
  if (id == '3e7dedbe37e44942dd46d264') then
--    Note("broadcast received")
    -- check for level change for comparison to GQ level range
    if (text=="char.status") then
      level = tonumber(gmcp("char.status.level"))
      gmcp_state = gmcp("char.status.state")
    end  -- char status
    
    -- listen for GMCP tick and check character state before updating GQ list
    if (text=="comm.tick") then
      for i = 1, #char_state do
        if tonumber(gmcp_state) == tonumber(char_state[i]) then
          SendNoEcho("gq list")
        end  -- if
      end  -- for
    end  -- comm tick

  end  -- plugin id check
end  -- function

function OnPluginEnable()
  OnPluginInstall()
end

function OnPluginInstall()
  Note("GQ List Miniwindow installed.  Type \"gqshow\" or \"gqhide\" to toggle the GQ List Miniwindow.")
  -- get initial char level for comparison to GQ list ranges
  SendNoEcho("protocols gmcp sendchar")
  level = gmcp("char.status.level")
  state = gmcp("char.status.state")
  -- values to check to make sure player can receive gq list update
  char_state = {3, 4, 5, 8, 9, 11, 12}
  SendNoEcho("gq list")
end

function window_show()
  my_window:show()
end

function window_hide()
  my_window:hide()
end

function debug_gq()
  gqhistory = {}
  Simulate("Num   Type            From  To  Status     Timer Players\n")
  Simulate("----- --------------- ---- ---- ---------- ----- -------\n")
  Simulate(" 9100 All players       30   40 Active        75       1\n")
  Simulate(" 9101 10 wins or fewe   40   50 Active        80       0\n")
end

]]>

</script>


<!-- Triggers -->

<triggers>

<!-- trigger to match start of GQ List -->

  <trigger
   enabled="y"
   match="Num   Type            From  To  Status     Timer Players"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  </trigger>

  <trigger
   enabled="y"
   match="----- --------------- ---- ---- ---------- ----- -------"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  <send>
    GQ_table = {}
    EnableTrigger ("GQ_line", true)
    EnableTrigger ("GQ_stopper", true)
  </send>
  </trigger>

<!-- trigger to match a GQ line -->

  <trigger
   match=" *"
   name="GQ_line"
   enabled="n"
   send_to="12"
   sequence="50"
   omit_from_output="y"
  >
  <send>
    table.insert (GQ_table, "%0")  -- add GQ item to our table
  </send>
  </trigger>

<!-- trigger to match end of GQ list -->
  
  <trigger
   match="(^&lt;)|^$"
   name="GQ_stopper"
   regexp="y"
   enabled="n"
   send_to="12"
   sequence="40"
   omit_from_output="n"
   script="gq_list_end"
  >
  <send>
    -- don't need to track GQs any more
    EnableTrigger ("GQ_line", false)
    EnableTrigger ("GQ_stopper", false)
    -- in case no table yet
    GQ_table = GQ_table or {}
    table.sort (GQ_table)
  </send>
  </trigger>

</triggers>


<!-- Aliases -->

<aliases>

<alias match="^gqshow$"
    script="window_show"  regexp="y"  enabled="y"  ignore_case="y"  send_to="12"  sequence="100"  >
</alias>

<alias match="^gqhide$"
    script="window_hide"  regexp="y"  enabled="y"  ignore_case="y"  send_to="12"  sequence="100"  >
</alias>

<alias match="^gqdebug$"
    script="debug_gq"  regexp="y"  enabled="y"  ignore_case="y"  send_to="12"  sequence="100"  >
</alias>

<alias match="^gqsound$"
    script="togglesound"  regexp="y"  enabled="y"  ignore_case="y"  send_to="12"  sequence="100"  >
</alias>

</aliases>



</muclient>
