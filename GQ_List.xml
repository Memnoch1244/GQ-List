<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, January 10, 2024, 4:25 PM -->
<!-- MuClient version 5.07-pre -->

<muclient>
<plugin
   name="GQ_List"
   author="Ramael"
   id="c4d0dab117586c793985623f"
   language="Lua"
   purpose="Shows GQ List in a miniwindow."
   save_state="y"
   date_written="2024-01-10 4:24:13"
   requires="5.07"
   version="1.0"
   >

</plugin>


<!--  Script  -->

<script>
<![CDATA[

require "themed_miniwindows"
require "tprint"
dofile(GetInfo(60).."aardwolf_colors.lua")


my_window = ThemedTextWindow(
   GetPluginID(),  -- string, required, a unique identifier for this window
   0,  -- integer, required, where to put it if the player hasn't moved it
   0,  -- integer, required, where to put it if the player hasn't moved it
   400,  -- integer, required, how big to make it if the player hasn't moved it
   100,  -- integer, required, how big to make it if the player hasn't moved it
   "Active Global Quests",  -- string, optional (nil means no titlebar), text to put into the title
   "center",  -- string, optional (default is "center"), "left", "center", or "right"
   false,  -- boolean, optional (default is false), true adds a close button in the top left
   true,  -- boolean, optional (default is false), make the window resizeable
   true,  -- boolean, optional (default is false), add a scrollbar and mousewheel scrolling
   true,  -- boolean, optional (default is false), make the text selectable
   true,  -- boolean, optional (default is false), make the text copyable via right-click
   false,  -- boolean, optional (default is false), turn detected URLs into clickable links
   false,  -- boolean, optional (default is false), automatically wrap text lines that are too wide
   nil,  -- string, optional (default is Dina), override the title font name
   nil,  -- integer, optional (default is 10), override the title font size
   nil,  -- string, optional (default is Dina), override the body text font name
   8,  -- integer, optional (default is 10), override the body text font size
   nil,  -- integer, optional (default is 1000), maximum number of text lines to keep
   nil,  -- integer, optional (default is 5 pixels), space between text and miniwindow frame
   nil,  -- boolean, optional (default is false), true will prevent the window from appearing until you call :show() on it
   false  -- boolean, optional (default is false), if true, pixels the same color as Theme.PRIMARY_BODY will be transparent
)


]]>


function gq_list_end(name, line, wildcards, styles)
  my_window:clear()
  my_window:add_text("Num   Type            From  To  Status     Timer Players")
  my_window:add_text("----- --------------- ---- ---- ---------- ----- -------")
  for i = 1, #GQ_table do
    if tonumber(string.sub(GQ_table[i], 29, 31)) &lt; tonumber(char_level) then
      text_var = "@w" .. GQ_table[i]
      my_window:add_text(text_var, draw_after)
    elseif tonumber(string.sub(GQ_table[i], 29, 31)) &gt;= tonumber(char_level) and tonumber(string.sub(GQ_table[i], 24, 26)) &lt;= tonumber(char_level) then
      text_var = "@G" .. GQ_table[i]
      my_window:add_text(text_var, draw_after)
    elseif tonumber(string.sub(GQ_table[i], 24, 26)) == tonumber(char_level) + 1 then
      text_var = "@Y" .. GQ_table[i]
      my_window:add_text(text_var, draw_after)
    else
      text_var = "@r" .. GQ_table[i]
      my_window:add_text(text_var, draw_after)
    end  -- if
  end  -- for
end  -- function

function timer_trigger()
  level = 0
  SendNoEcho("level")
  SendNoEcho("gq list")
end

function OnPluginEnable()
  OnPluginInstall()
end

function OnPluginInstall()
  Note("GQ List Miniwindow installed.  Type \"gqshow\" or \"gqhide\" to toggle the GQ List Miniwindow.")
  SendNoEcho("level")
  SendNoEcho("gq list")
  AddTimer ("gq_refresh_timer", 0, 0, 30, "", timer_flag.Enabled, "timer_trigger")
end

function window_show()
  my_window:show()
end

function window_hide()
  my_window:hide()
end

</script>


<!-- Triggers -->

<triggers>

<!-- trigger to match start of GQ List -->

  <trigger
   enabled="y"
   match="You raise a level! You are now level *."
   send_to="12"
   sequence="100"
   omit_from_output="n"
  >
  <send>
   char_level = "%1"
  </send>
  </trigger>

  <trigger
   enabled="y"
   match="You are now in AFK mode."
   send_to="12"
   sequence="100"
   omit_from_output="n"
  >
  <send>
   SetTimerOption("gq_refresh_timer", "enabled", "n")
  </send>
  </trigger>

  <trigger
   enabled="y"
   match="AFK mode removed."
   send_to="12"
   sequence="100"
   omit_from_output="n"
  >
  <send>
   SetTimerOption("gq_refresh_timer", "enabled", "y")
  </send>
  </trigger>

  <trigger
   enabled="y"
   match="You are back in the game."
   send_to="12"
   sequence="100"
   omit_from_output="n"
  >
  <send>
   SetTimerOption("gq_refresh_timer", "enabled", "y")
  </send>
  </trigger>

  <trigger
   enabled="y"
   match="You are now in AFK mode."
   send_to="12"
   sequence="100"
   omit_from_output="n"
  >
  <send>
   SetTimerOption("gq_refresh_timer", "enabled", "n")
  </send>
  </trigger>

  <trigger
   enabled="y"
   match="You are level *."
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  <send>
   char_level = "%1"
  </send>
  </trigger>

  <trigger
   enabled="y"
   match="Num   Type            From  To  Status     Timer Players"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  </trigger>

  <trigger
   enabled="y"
   match="----- --------------- ---- ---- ---------- ----- -------"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  <send>
GQ_table = {}
EnableTrigger ("GQ_line", true)
EnableTrigger ("GQ_stopper", true)
</send>
  </trigger>

<!-- trigger to match a GQ line -->

  <trigger
   match=" *"
   name="GQ_line"
   enabled="n"
   send_to="12"
   sequence="50"
   omit_from_output="y"
  >
  <send>
  table.insert (GQ_table, "%0")  -- add GQ item to our table
  </send>
  </trigger>

<!-- trigger to match end of GQ list -->
  
  <trigger
   match="(^&lt;)|^$"
   name="GQ_stopper"
   regexp="y"
   enabled="n"
   send_to="12"
   sequence="40"
   omit_from_output="n"
   script="gq_list_end"
  >
  <send>
-- don't need to track GQs any more
EnableTrigger ("GQ_line", false)
EnableTrigger ("GQ_stopper", false)
-- in case no table yet
GQ_table = GQ_table or {}
table.sort (GQ_table)
-- print ("Currently Active Global Quests:")
-- for _, quest in ipairs (GQ_table) do
--   print (quest)
-- end -- for
  </send>
  </trigger>

</triggers>


<!-- Aliases -->

<aliases>

<alias match="^gqshow$"
    script="window_show"  regexp="y"  enabled="y"  ignore_case="y"  send_to="12"  sequence="100"  >
</alias>

<alias match="^gqhide$"
    script="window_hide"  regexp="y"  enabled="y"  ignore_case="y"  send_to="12"  sequence="100"  >
</alias>

</aliases>



</muclient>
